# Dateibereich v3.5

<aside class="warning">Dieser Abschnitt gilt für die Stud.IP v3.5. Ab Stud.IP v4.0 gibt es einen neuen Dateibereich.</aside>

In Stud.IP hat jede Einrichtung und jede Veranstaltung einen eigenen
Dateibereich. Dateibereiche sind (spezielle) Ordner. Ordner können
Dateien und Ordner enthalten, in denen sich wiederum Dateien und
Ordner befinden können.

Es gibt verschiedene Arten von Ordnern, die sich in der Regel darin
unterscheiden, wer sie sehen kann und wer Lese- und/oder
Schreibzugriff auf diese Ordner hat.

Im Dateibereich von Stud.IP v3.5 werden drei Arten von Entitäten
verwendet. Es gibt Dokumente (type=documents), Ordner
(type=document-folders) und Lizenzen (type=document-licenses).


## Schema "documents"

In Stud.IP kann man Dokumente auf zwei Weisen einbinden. Zum einen
können Dokumente hochgeladen werden. Zum anderen kann auch einfach
eine URL hinterlegt werden, die via Stud.IP-Proxy an die Nutzer
herausgegeben wird. Dokumente bestehen sowohl aus ihren Metadaten (wie
Name und Beschreibung), als auch aus ihrem eigentlichen Inhalt.

TODO: download-link, url

### Relationen

Derzeit können die Relationen nur ausgelesen, aber nicht verändert werden.

 Relation | Beschreibung
--------  | ------------
license   | die Lizenz des Dokuments
owner     | der Besitzer des Dokuments
parent    | Speicherort des Dokuments; entweder ein Ordner oder eine Nachricht
range     | Link zum Dateibereich, in dem sich das Dokument befindet; entweder eine Veranstaltung oder eine Einrichtung

### Attribute

Attribut    | Beschreibung
--------    | ------------
name        | Name des Dokuments
description | Beschreibung des Dokuments
filename    | Dateiname des Dokuments
mkdate      | Anlegedatum
chdate      | Datum der letzten Änderung
filesize    | Größe der Datei in Bytes
downloads   | Anzahl der bisherigen Downloads
priority    | Ordnungsnummer; dient der Sortierung in Stud.IP

### Meta-Informationen

Ein Dokument liefert als Meta-Information die URL zum Abrufen und
Aktualisieren seines Inhalts zurück.

## Schema "document-folders"

Ordner enthalten Dokumente und können im Zugriff beschränkt werden

### Attribute

Attribut    | Beschreibung
--------    | ------------
name        | Name des Ordners
description | Beschreibung des Ordners
permission  | Zugriffsbeschränkung des Ordners; ein String, der maximal aus "frwx" besteht
mkdate      | Anlegedatum
chdate      | Datum der letzten Änderung
priority    | Ordnungsnummer; dient der Sortierung in Stud.IP

Die Zugriffsbeschränkung ist als String kodiert, ähnlich wie im Dateisystem eines Betriebsystems. Maximal besteht es aus den Buchstaben "frwx". Dabei bedeuten die Buchstaben folgendes:

Buchstabe | Bedeutung
--------- | ---------
f         | Ordner erstellen (Alle Nutzer können Ordner erstellen)
r         | Lesen (Dateien können heruntergeladen werden)
w         | Schreiben (Dateien können heraufgeladen werden)
x         | Sichtbarkeit (Ordner wird angezeigt)

### Relationen

Derzeit können die Relationen nur ausgelesen, aber nicht verändert werden.

Relation         | Beschreibung
---------------- | ------------
documents        | die im Ordner liegenden Dokumente
document-folders | der im Ordner liegenden Ordner
owner            | der Besitzer des Ordners
parent           | der übergeordnete Ordner des Ordners, falls es einen gibt
range            | Link zum Dateibereich, in dem sich das Dokument befindet; entweder eine Veranstaltung oder eine Einrichtung

## Schema "document-licenses"

Dokumenten können Lizenzen zugeordnet sein.

Attribut            | Beschreibung
------------------- | ------------
name                | Name der Lizenz
description         | Beschreibung der Lizenz
student-description | TODO
protected           | TODO

Lizenzen haben keine Relationen.


## Alle Dokumente einer Veranstaltung/Einrichtung

```shell
curl --request GET \
    --url https://example.com/api/courses/<COURSE-ID>/documents \
    --header "Authorization: Basic `echo -ne "test_autor:testing" | base64`"
```

```javascript
fetch('https://example.com/api/courses/<COURSE-ID>/documents', {
    method: 'GET',
    mode: 'cors',
    headers: new Headers({
        'Authorization': `Basic ${btoa('test_autor:testing')}`
    })
}).then(response => console.log(response))
```


> Der Request liefert JSON ähnlich wie dieses:

<%= partial "includes/json/get_documents_of_course" %>

Wenn der Dateibereich in einer Veranstaltung aktiviert ist, kann man
mit dieser Route **alle** Dokumente einer Veranstaltung abfragen.

### HTTP Request

`GET https://example.com/jsonapi/courses/{id}/documents`

### URL-Parameter

Parameter |  Beschreibung
--------- | -------
id        | die ID der Veranstaltung

### Authorisierung

Diese Route kann von allen Nutzern verwendet werden, die Zugriff auf
die entsprechende Veranstaltung oder Einrichtung haben.




## Alle Ordner einer Veranstaltung/Einrichtung
```shell
curl --request GET \
    --url https://example.com/api/courses/<COURSE-ID>/document-folders \
    --header "Authorization: Basic `echo -ne "test_autor:testing" | base64`"
```

```javascript
fetch('https://example.com/api/courses/<COURSE-ID>/document-folders', {
    method: 'GET',
    mode: 'cors',
    headers: new Headers({
        'Authorization': `Basic ${btoa('test_autor:testing')}`
    })
}).then(response => console.log(response))
```
> Der Request liefert JSON ähnlich wie dieses:

<%= partial "includes/json/get_document_folders_of_course" %>

Wenn der Dateibereich in einer Veranstaltung aktiviert ist, kann man
mit dieser Route **alle** Ordner einer Veranstaltung abfragen, auf die
man Zugriff hat.

### HTTP Request
`GET https://example.com/(courses|institutes)/{id}/document-folders`

### URL-Parameter

Parameter |  Beschreibung
--------- | -------
id        | die ID der Veranstaltung

### Authorisierung

Diese Route kann von allen Nutzern verwendet werden, die Zugriff auf
die entsprechende Veranstaltung oder Einrichtung haben. Es werden aber
lediglich diejenigen Ordner gezeigt, die der Nutzer verwenden kann.




## Ein Dokument auslesen
```shell
curl --request GET \
    --url https://example.com/api/documents/{id} \
    --header "Authorization: Basic `echo -ne "test_autor:testing" | base64`"
```

```javascript
fetch('https://example.com/api/documents/{id}', {
    method: 'GET',
    mode: 'cors',
    headers: new Headers({
        'Authorization': `Basic ${btoa('test_autor:testing')}`
    })
}).then(response => console.log(response))
```
> Der Request liefert JSON ähnlich wie dieses:

<%= partial "includes/json/get_document" %>

Mit dieser Route kann man ein einzelnes Dokument auslesen, wenn man
darauf Zugriff hat.

### HTTP Request
`GET https://example.com/documents/{id}`

### URL-Parameter

Parameter |  Beschreibung
--------- | -------
id        | die ID des Dokuments

### Authorisierung

Autoren sehen nur eingeschränkt Dokumente in ihren Veranstaltungen (nach den üblichen
Stud.IP-Regeln). Tutoren und Dozenten haben Zugriff auf alle Dokumente
ihrer Veranstaltung; Administratoren entsprechend auf Dokumente, die
zu Veranstaltungen ihrer Einrichtungen gehören; Root natürlich auf alle.


## Eine Dokument-Datei herunterladen
```shell
curl --request GET \
    --url https://example.com/api/documents/{id} \
    --header "Authorization: Basic `echo -ne "test_autor:testing" | base64`"
```

```javascript
fetch('https://example.com/api/documents/{id}/content', {
    method: 'GET',
    mode: 'cors',
    headers: new Headers({
        'Authorization': `Basic ${btoa('test_autor:testing')}`
    })
}).then(response => console.log(response))
```
> Der Request liefert in der Regel kein JSON. (Es sei denn, dass das Dokument ein JSON-Objekt war.)

<aside class="warning">Diese Route ist keine JSON:API Route, da sie den
Inhalt der Datei liefert.</aside>

Mit dieser Route kann man die tatsächliche Datei herunterladen. Diese
wird in der Regel nicht als JSON ausgeliefert.

### HTTP Request
`GET https://example.com/documents/{id}/content`

### URL-Parameter

Parameter |  Beschreibung
--------- | -------
id        | die ID des Dokuments

### Authorisierung

Autoren können nur eingeschränkt Dokumente in ihren Veranstaltungen
herunterladen (nach den üblichen Stud.IP-Regeln). Tutoren und Dozenten
haben Zugriff auf alle Dokumente ihrer Veranstaltung; Administratoren
entsprechend auf Dokumente, die zu Veranstaltungen ihrer Einrichtungen
gehören; Root natürlich auf alle.

## Eine Dokument-Datei aktualisieren

```shell
curl --request POST --form 'file=@die-aktuelle-datei.jpg' \
     --header "Authorization: Basic `echo -ne "test_dozent:testing" | base64`" \
     --url "https://example.com/api/documents/{id}/content"
```

<aside class="warning">Diese Route ist keine JSON:API Route.</aside>

Mit dieser Route kann man den Inhalt eines vorhandenen Dokuments aktualisieren.

Dazu sendet man einen ``POST``-Request an dieselbe Route, von der aus man auch den Inhalt herunterladen würde.

### HTTP Request
`POST https://example.com/documents/{id}/content`

### URL-Parameter

Parameter |  Beschreibung
--------- | -------
id        | die ID des Dokuments

### Authorisierung

Die Berechtigungsregeln zum Aktualisieren des Inhalts eines Dokuments sind komplex. In der Regel darf man seine eigenen
Dokumente und Tutoren und Dozenten die meisten anderen Dokumente aktualisieren. Die Berechtigungsregeln entsprechen dem
Verhalten, das Stud.IP über die Web-Oberfläche zeigt.


## Ein Dokument erstellen

Ein Dokument wird immer in einem Ordner erstellt. Da wie oben
beschrieben Dokumente aus Metadaten **und** Inhalt bestehen, muss das
Anlegen einer Datei in zwei Schritten passieren. Dazu kann entweder
a.) zuerst der Inhalt hochgeladen werden und dann die Metadaten (wie
Beschreibung und Lizenz) angepasst werden oder b.) erst die Datei mit
den Metadaten erstellt werden und nachträglich der Inhalt hochgeladen
werden.


### Variante a.

```shell
curl --request POST --form 'file=@eine-neue-datei.jpg' \
     --header "Authorization: Basic `echo -ne "test_dozent:testing" | base64`" \
     --url "https://example.com/api/document-folders/{id}/documents"
```

Zuerst sendet man einen ``POST``-Request mit ``Content-Type:
multipart/form-data`` und der Datei im Request-Body an die unten
angegebene URL.

Man erhält im Erfolgsfall einen Status-Code 201 und einen
Location-Header, der einen zum neu erstellten Dokument in die JSON:API
bringt.

Der *Dateiname* wird standardmäßig aus dem Upload genommen und auch
 für den Namen der Datei verwendet.

Will man einen anderen Dateinamen verwenden, kann man einen
HTTP-Header wie: ``Slug: neuer-dateiname.txt`` verwenden.

Über die URL aus dem erhaltenen ``Location``-Header erhält man die
JSON:API-Repräsentation der hochgeladenen Datei.

Nun können mit einem (JSON:API-typischen) ``PATCH``-Request an diese
Route Modifikationen an den Metadaten (wie Beschreibung usw.)
vorgenommen werden.


### Variante b.

```shell
curl --request POST \
    --url https://example.com/api/document-folders/{id}/documents \
    --header "Content-Type: application/vnd.api+json" \
    --header "Authorization: Basic `echo -ne "test_autor:testing" | base64`" \
    --data '{"data": { "type": "documents", "attributes": { "name": "iason.txt", "description": "Iasons Lebenslauf", "filename": "iason.txt"}}}'
```

Zunächst sendet man einen ``POST``-Request mit ``Content-Type:
application/vnd.api+json`` an die unten angegebene URL.

Im Request-Body muss dann eine JSON:API-typische Repräsentation des
neuen Dokuments enthalten sein. Im Erfolgsfall erhält man dann eine
Repräsentation der neu angelegten Datei, die aber derzeit noch keinen
Inhalt hat.

Daher muss der Inhalt in einem zweiten Request hochgeladen werden.
Dazu wird unter "Eine Dokument-Datei aktualisieren" beschrieben ein
``POST``-Request an die ``content``-URL geschickt.

### HTTP Request
`POST https://example.com/document-folders/{id}/documents`

### URL-Parameter

Parameter |  Beschreibung
--------- | -------
id        | die ID des Dokuments

### HTTP Request Body

Im Request-Body muss das neue Dokument als ein einziges ``resource object`` enthalten sein. Das ``resource object`` muss im ``type``-Attribut "documents" enthalten und darf keine ``id`` haben.

```
// Ein Beispiel:

POST /document-folders/{id}/documents HTTP/1.1
Content-Type: application/vnd.api+json
Accept: application/vnd.api+json

{
  "data": {
    "type": "documents",
    "attributes": {
      "name": "Der Name des Dokuments",
      "description": "Die Beschreibung des Dokuments",
      "filename": "test-file.txt"
    }
}
```

### Authorisierung

Die Berechtigungen zum Anlegen eines Dokuments in einem Ordner sind komplex und entsprechend denen, die in der Web-Oberfläche von Stud.IP verwendet werden.


## Ein Dokument löschen
```shell
curl --request DELETE \
    --url https://example.com/api/documents/{id} \
    --header "Authorization: Basic `echo -ne "test_autor:testing" | base64`"
```

```javascript
fetch('https://example.com/api/documents/{id}', {
    method: 'DELETE',
    mode: 'cors',
    headers: new Headers({
        'Authorization': `Basic ${btoa('test_autor:testing')}`
    })
}).then(response => console.log(response))
```
> Der Request liefert nichts zurück.

Mit dieser Route kann man eine Datei löschen. Gemäß
JSON-API-Spezifikation antwortet der Server im Erfolgsfall mit einem
Status-Code 204.

### HTTP Request
`DELETE https://example.com/documents/{id}`

### URL-Parameter

Parameter |  Beschreibung
--------- | -------
id        | die ID des Dokuments

### Authorisierung

Eigene Dateien können gelöscht werden. Ansonsten gelten die für die
Veranstaltung bzw. Einrichtungen geltenden Einschränkungen ganz genau
wie im üblichen Stud.IP.


## Ein Dokument ändern

```shell
curl --request PATCH \
    --url https://example.com/api/documents/{id} \
    --header "Authorization: Basic `echo -ne "test_autor:testing" | base64`"
```

```javascript
fetch('https://example.com/api/documents/{id}', {
    method: 'PATCH',
    mode: 'cors',
    headers: new Headers({
        'Authorization': `Basic ${btoa('test_autor:testing')}`
    })
}).then(response => console.log(response))
```

Die Attribute ``name`` und ``description`` und die
``license``-Relation eines Dokuments sind durch einen
``PATCH``-Request änderbar. Der Request-Body enthält dazu ein
geeignetes ``resource object``.

### HTTP Request
`PATCH https://example.com/documents/{id}`

### URL-Parameter

Parameter |  Beschreibung
--------- | -------
id        | die ID des Dokuments

### HTTP Request Body

Im Request-Body muss das modifizierte Dokument als ein einziges
``resource object`` enthalten sein. Wenn Attribute oder Relationen
ausgelassen werden, interpretiert der Server dies so, als ob sie mit
ihren aktuellen Werten enthalten wären.

```
// Ein Beispiel:

POST /documents/17 HTTP/1.1
Content-Type: application/vnd.api+json
Accept: application/vnd.api+json

{
  "data": {
    "type": "documents",
    "id": "17",
    "attributes": {
      "name": "Der neue Name des Dokuments",
      "description": "Die neue Beschreibung des Dokuments"
    }
}
```

### Authorisierung

Für das Ändern der Metadaten eines Dokuments gelten die für die
Veranstaltung bzw. Einrichtungen gültigen Einschränkungen ganz genau
wie in der üblichen Stud.IP-Weboberfläche.


## Einen Ordner auslesen
```shell
curl --request GET \
    --url https://example.com/api/document-folders/{id} \
    --header "Authorization: Basic `echo -ne "test_autor:testing" | base64`"
```

```javascript
fetch('https://example.com/api/document-folders/{id}', {
    method: 'GET',
    mode: 'cors',
    headers: new Headers({
        'Authorization': `Basic ${btoa('test_autor:testing')}`
    })
}).then(response => console.log(response))
```
> Der Request liefert JSON ähnlich wie dieses:

<%= partial "includes/json/get_document_folder" %>

### HTTP Request
`GET https://example.com/document-folders/{id}`

### URL-Parameter

Parameter |  Beschreibung
--------- | -------
id        | die ID des Ordners

### Authorisierung

Autoren sehen nur eingeschränkt Ordner in ihren Veranstaltungen
(nach den üblichen Stud.IP-Regeln). Tutoren und Dozenten haben Zugriff
auf alle Ordner ihrer Veranstaltung; Administratoren entsprechend
auf Ordner, die zu Veranstaltungen ihrer Einrichtungen gehören;
Root natürlich auf alle.




## Alle Kindordner eines Ordners
```shell
curl --request GET \
    --url https://example.com/api/document-folders/{id}/document-folders \
    --header "Authorization: Basic `echo -ne "test_autor:testing" | base64`"
```

```javascript
fetch('https://example.com/api/document-folders/{id}/document-folders', {
    method: 'GET',
    mode: 'cors',
    headers: new Headers({
        'Authorization': `Basic ${btoa('test_autor:testing')}`
    })
}).then(response => console.log(response))
```
> Der Request liefert JSON ähnlich wie dieses:

<%= partial "includes/json/get_document_folders_of_document_folder" %>

### HTTP Request
`GET https://example.com/document-folders/{id}/document-folders`

### URL-Parameter

Parameter |  Beschreibung
--------- | -------
id        | die ID des Ordners

### Authorisierung
Die Kindordner eines Ordners darf man nur sehen, wenn man den Ordner
sehen würde. Außerdem greifen die Stud.IP-üblichen Beschränkungen:
Hausaufgabenorder und Dateiberechtigungen werden entsprechend
berücksichtigt.




## Alle Dokumente eines Ordners
```shell
curl --request GET \
    --url https://example.com/api/document-folders/{id}/documents \
    --header "Authorization: Basic `echo -ne "test_autor:testing" | base64`"
```

```javascript
fetch('https://example.com/api/document-folders/{id}/documents', {
    method: 'GET',
    mode: 'cors',
    headers: new Headers({
        'Authorization': `Basic ${btoa('test_autor:testing')}`
    })
}).then(response => console.log(response))
```
> Der Request liefert JSON ähnlich wie dieses:

<%= partial "includes/json/get_documents_of_document_folder" %>

### HTTP Request
`GET https://example.com/document-folders/{id}/documents`

### URL-Parameter

Parameter |  Beschreibung
--------- | -------
id        | die ID des Ordners

### Authorisierung
Die Dokumente eines Ordners darf man nur sehen, wenn man den Ordner
sehen würde. Außerdem greifen die Stud.IP-üblichen Beschränkungen:
Hausaufgabenorder und Dateiberechtigungen werden entsprechend
berücksichtigt.




## Eine Lizenz auslesen
```shell
curl --request GET \
    --url https://example.com/api/document-licenses/{id} \
    --header "Authorization: Basic `echo -ne "test_autor:testing" | base64`"
```

```javascript
fetch('https://example.com/api/document-licenses/{id}', {
    method: 'GET',
    mode: 'cors',
    headers: new Headers({
        'Authorization': `Basic ${btoa('test_autor:testing')}`
    })
}).then(response => console.log(response))
```
> Der Request liefert JSON ähnlich wie dieses:

<%= partial "includes/json/get_document_license" %>

### HTTP Request
`GET https://example.com/document-licenses/{id}`

### URL-Parameter

Parameter |  Beschreibung
--------- | -------
id        | die ID der Lizenz

### Authorisierung

Jeder kann Lizenzen auslesen.



## TODO: Dokumente durchsuchen
    Sucht in allen Veranstaltungen eines Nutzers nach passenden
    Dokumenten, auf die der API-Nutzer Zugriff hat.

    GET /documents?filter[search]=*<Suchwort>*

## TODO: Alle Dokumente einer Veranstaltung/Einrichtung
    GET /{type:courses|institutes}/{id}/relationships/documents

   see http://jsonapi.org/format/#fetching-relationships

## TODO: Neuen Unterordner anlegen
    POST /document-folders/{id}/document-folders

## TODO: Neuen Ordner in Veranstaltung/Einrichtung anlegen
    POST /{type:courses|institutes}/{id}/document-folders

## TODO: Ordner umbenennen
    PATCH /document-folders/{id}

## TODO: Ordner löschen
    DELETE /document-folders/{id}

## TODO: Alle Lizenzen auslesen
    GET /document-licenses
