# Dateibereich v4.0+

<aside class="warning">Dieser Abschnitt gilt für die Stud.IP >= v4.0 Die
Stud.IP v3.5 verwendet den alten Dateibereich.</aside>

In Stud.IP hat jeder Nutzer, jede Einrichtung und jede Veranstaltung
einen eigenen Dateibereich. Dateibereiche sind (spezielle) Ordner.
Ordner können Dateien und Ordner enthalten, in denen sich wiederum
Dateien und Ordner befinden können.

Es gibt verschiedene Arten von Ordnern, die sich in der Regel darin
unterscheiden, wer sie sehen kann und wer Lese- und/oder
Schreibzugriff auf diese Ordner hat.

## Schemata


### Schema "file-refs"

Aus Nutzersicht sind Dateien in Stud.IP Ressourcen vom Typ
"file-refs". Technisch gesehen sind es allerdings Verweise auf die
Ressourcen vom Typ "files". Letztere sind die tatsächlich auf der
Festplatte gespeicherten Dateien, die mithilfe der "file-refs" nur
verlinkt werden.

Vereinfacht gesagt, hantiert man in der Regel immer mit "file-refs".

### Attribute

Attribut    | Beschreibung
--------    | ------------
name        | der Name der Datei
description | eine optionale Beschreibung der Datei
mkdate      | das Anlegedatum der Datei
chdate      | das Datum der letzten Änderung der Metadaten ('name', 'description', …) der Datei
downloads   | Wie häufig wurde diese Datei heruntergeladen?
filesize    | die Größe der Datei in Byte
storage     | TODO

### Relationen

 Relation    | Beschreibung
--------     | ------------
file         | die tatsächliche Datei auf der Festplatte
owner        | der Nutzer, dem diese Datei gehört
parent       | der Ordner, im dem diese Datei liegt
range        | die Veranstaltung, die Einrichtung oder der Nutzer, in dessen Dateibereich diese Datei liegt
terms-of-use | die Lizenz, unter der diese Datei verfügbar gemacht wird

### Meta

In den Metadaten von Dateien ist der "download-link" enthalten, um den Inhalt der Datei herunterzuladen.


### Schema "files"

Anders als Ressourcen vom Typ "file-refs" sind Ressourcen vom Typ "files" über die grafische Oberfläche nicht verfügbar. Technisch werden "files" verwendet, um die Dateien tatsächlich auf der Festplatte (oder einem entfernten Speicherort) abzulegen.

Erst durch die Verknüpfung durch "file-refs" werden Ressourcen vom Typ "files" sichtbar.

### Attribute

Attribut  | Beschreibung
--------- | ------------
name      | der Name der Datei
mime-type | der MIME-Typ der Datei
size      | die Größe der Datei in Bytes
storage   | TODO
mkdate    | das Anlegedatum der Datei
chdate    | das Datum der letzten Änderung der Datei

### Relationen

 Relation | Beschreibung
--------  | ------------
file-refs | alle Ressourcen vom Typ "file-refs", die auf diese Datei verweisen
owner     | der Nutzer, dem diese Datei gehört

### Type "folders"

Ressourcen vom Typ "folders" sind im herkömmlichen Sinne Ordner und können weitere "folders" oder Ressourcen vom Typ "file-refs" enthalten.

Es gibt verschiedene Arten von "folders". In Stud.IP werden aber vorrangig "StandardFolders" verwendet. Für diese sind alle Operationen möglich. Für andere Arten entscheiden die Implementierungen jeweils selbst, ob die Operation möglich ist.

### Attribute

Attribut             | Beschreibung
------------         | ------------
folder-type          | die Art des Ordners
name                 | der Name des Ordners
description          | die Beschreibung des Ordners
mkdate               | das Anlegedatum des Ordners
chdate               | das Datum der letzten Änderung des Ordners
is-visible           | Darf der eingeloggte Nutzer den Ordner sehen?
is-readable          | Darf der eingeloggte Nutzer den Ordner öffnen?
is-writable          | Darf der eingeloggte Nutzer im Ordner Dateien anlegen?
is-editable          | Darf der eingeloggte Nutzer den Ordner bearbeiten?
is-subfolder-allowed | Darf der eingeloggte Nutzer im Ordner weitere Ordner anlegen?


### Relationen

Relation  | Beschreibung
--------- | ------------
owner     | der Nutzer, dem dieser Ordner gehört
parent    | der Ordner, in dem sich dieser Ordner befindet
range     | die Veranstaltung, die Einrichtung oder der Nutzer, in dessen Dateibereich dieser Ordner liegt
folders   | die Ordner, die sich in diesem Ordner befinden
file-refs | die Dateien, die sich in diesem Ordner befinden


### Type "terms-of-use"

Jede Datei unterliegt einer Lizenz, die die Nutzung, Weitergabe und Veränderung regelt.

### Attribute

Attribut     | Beschreibung
------------ | ------------
name         | der Name der Lizenz
description  | die Beschreibung der Lizenz
icon         | das für die Lizenz verwendete Icon
mkdate       | das Anlegedatum der Lizenz
chdate       | das Datum der letzten Änderung der Lizenz


### Relationen

Lizenzen ('terms-of-use') haben keine Relationen.

## Alle Lizenzen

```shell
curl --request GET \
    --url https://example.com/api/terms-of-use \
    --header "Authorization: Basic `echo -ne "test_autor:testing" | base64`"
```

Diese Route erfragt alle im Stud.IP registrierten Lizenzen von Dateien.

### HTTP Request

`GET https://example.com/jsonapi/terms-of-use`

### Autorisierung

Jeder Nutzer darf diese Route verwenden.

## Eine Lizenz auslesen

```shell
curl --request GET \
    --url https://example.com/api/terms-of-use/<ID> \
    --header "Authorization: Basic `echo -ne "test_autor:testing" | base64`"
```

Beschreibung

### HTTP Request

`GET https://example.com/jsonapi/terms-of-use/{id}`

Parameter | Beschreibung
--------- | ------------
id        | die ID der Lizenz

### URL-Parameter

keine URL-Parameter

### Autorisierung

Jeder Nutzer darf diese Route verwenden.


## Alle Dateien eines Dateibereichs

```shell
curl --request GET \
    --url https://example.com/api/<courses,institutes,users>/<ID>/file-refs \
    --header "Authorization: Basic `echo -ne "test_autor:testing" | base64`"
```

> Der Request liefert JSON ähnlich wie dieses:

<%#= partial "includes/json/get_courses_id_files" %>

Mit dieser Route können *alle*  Dateien eines Dateibereichs ausgelesen
werden. Das Ergebnis ist eine flache Liste aller Dateien, ungeachtet
der Zugehörigkeit zu Ordnern dieses Dateibereichs.

### HTTP Request

`GET https://example.com/jsonapi/courses/{id}/file-refs`
`GET https://example.com/jsonapi/institutes/{id}/file-refs`
`GET https://example.com/jsonapi/users/{id}/file-refs`

Parameter |  Beschreibung
--------- | -------
id        | die ID der Veranstaltung, der Einrichtung oder des Nutzers

### URL-Parameter

Parameter    | Default | Beschreibung
---------    | ------- | ------------
page[offset] | 0       | der Offset (siehe Paginierung)
page[limit]  | 30      | das Limit (siehe Paginierung)

### Autorisierung

Die Dateien einer Einrichtung darf jeder Nutzer sehen. Die Dateien
einer Veranstaltung sehen alle Nutzer, die Zugriff
auf die Veranstaltung haben. Die Dateien eines Nutzers sehen alle, es
sei denn der Nutzer ist unsichtbar.

Im Übrigen gelten die Zugriffsregeln der Ordner, in denen die Dateien liegen.


## Alle Ordner eines Dateibereichs

```shell
curl --request GET \
    --url https://example.com/api/<courses,institutes,users>/<ID>/folders \
    --header "Authorization: Basic `echo -ne "test_autor:testing" | base64`"
```

Mit dieser Route können *alle*  Ordner eines Dateibereichs ausgelesen
werden. Das Ergebnis ist eine flache Liste aller Ordner, ungeachtet
der Zugehörigkeit zu Ordnern dieses Dateibereichs.

### HTTP Request

`GET https://example.com/jsonapi/courses/{id}/folders`
`GET https://example.com/jsonapi/institutes/{id}/folders`
`GET https://example.com/jsonapi/users/{id}/folders`

Parameter |  Beschreibung
--------- | -------
id        | die ID der Veranstaltung, der Einrichtung oder des Nutzers

### URL-Parameter

Parameter    | Default | Beschreibung
---------    | ------- | ------------
page[offset] | 0       | der Offset (siehe Paginierung)
page[limit]  | 30      | das Limit (siehe Paginierung)

### Autorisierung

Die Ordner einer Einrichtung darf jeder Nutzer sehen. Die Ordner einer
Veranstaltung sehen alle Nutzer, die Zugriff auf die Veranstaltung
haben. Die Ordner eines Nutzers sehen alle, es sei denn der Nutzer ist
unsichtbar.

Im Übrigen gelten die Zugriffsregeln der Ordner, in denen die Ordner liegen.
